How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The diff isolated the changed lines thus making it easier to find the change(s) that caused the problem.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Accessing the entire history of a file facilitates reviewing past decisions to in case a recent change broke something or a previous alternative snippet might be better due to subsequent changes.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    With preserving code it is more important to reach specific milestones and capture what that milestone was by adding a description than just saving a version in case there is a hardware issue that might cause data loss.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Programmers separate related aspects of a project for efficiency purposes, not because they are really distinct. This is a significant difference from normal documents which are usually distinct stand alone items.

How can you use the commands git log and git diff to view the history of files?

    Git log shows all the individual commits in the repository. Git diff will show the differences between the various versions stored in those commits.

How might using version control make you more confident to make changes that
could break something?

    Since version control makes it easier to find and fix things that broke working code there is less risk than if you had to do everything manually.

Now that you have your workspace set up, what do you want to try using Git for?

    Sotring all my work on my projects.
